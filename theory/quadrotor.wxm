/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 0.8.7 ] */

/* [wxMaxima: title   start ]
Quadrotor Force and Moment Models
   [wxMaxima: title   end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("dynamics.wxm")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Propulsion
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
When finding G we need to express dstate in terms of the input ratios and thrust sums. This means we need to substitute
all occurences of T_i with the ratios.
As a rough example The equation in the x direction should be:
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
'Bond Graph Dynamic Modeling and Stabilization of a Quad-Rotor Helicopter'
 page 3 equations for Thrust vs Rpm
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
RPM(dutycyle,KV,batVolt) := dutycycle*KV*2*%pi/60*batVolt$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ThrustFull(dutycycle) := rho/4*(''(RPM(dutycycle,KV,batVolt)))^2*rBlade^3*liftCurveSlope*nBlades*chord*(theta_tau-phi_tau);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Most of these are constants so we will substitute the constant terms as gamma.
Gamma = (chord*pi^2*rho*(theta_tau-phi_tau)*batVolt^2*KV^2*liftCurveSlope*nBlades*rBlade^3)/3600
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Thrust(dutycycle) := ''(fullratsubst([(chord*%pi^2*rho*(theta_tau-phi_tau)*batVolt^2*KV^2*liftCurveSlope*nBlades*rBlade^3)/3600=C[T]],ThrustFull(dutycycle)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
GammaT(%rho,theta_tau,phi_tau,batVolt,KV,liftCurveSlope,nBlades,rBlade) :=
(chord*%pi^2*%rho*(theta_tau-phi_tau)*batVolt^2*KV^2*liftCurveSlope*nBlades*rBlade^3)/3600$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
http://www.aveox.com/DC.aspx  Equations for torque calculation in terms of RPM
I = Current 
Inl = No load current 
J = Torque (oz-in/A) 
Kb = Voltage constant (Volt/1000 RPM) 
Kt = Torque constant (oz-In/A) 
Pi = Power input (Watts)  
Rm = Terminal resistance 
RPM = Revolutions/minute 
V = Voltage

Torque constant: Kt=Kb x 1.345 
Current draw of motor: I = [V-(Kb x kRPM)]/Rm 
Torque output of motor: J = (Kt x I) - (Kt x Inl) 
RPM of motor: kRPM = (V - RmI) / Kb 
KV = 1000/Kb
Kb = 1000/KV
0.000968504759=1.345

CHeck current draw of motor equation.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Torque(dutycycle):= 0.968504759/KV*((batVolt*dutycycle)/Rm-Inl);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
This equation looks wrong so redefining.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Torque(dutycycle):= C[Q]*dutycycle^2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
T_L : Thrust(dutycycle_L)$ T_R : Thrust(dutycycle_R)$ T_F : Thrust(dutycycle_F)$ T_B : Thrust(dutycycle_B)$
t_L : Torque(dutycycle_L)$ t_R : Torque(dutycycle_R)$ t_F : Torque(dutycycle_F)$ t_B : Torque(dutycycle_B)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_b_T_quad : factor(transpose([-1*(T_F+T_B+T_L+T_R),0,0]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
M_b_T_quad : fullratsimp(transpose([(T_L - T_R)*dm , (T_F-T_B)*dm, t_L+t_R-t_F-t_B]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Aerodynamics
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
Check these equaitons.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Cl : 2*%pi*%alpha$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Assuming an uncambered lifting surface ( the frame) we can estimate the drag polar as:
home.anadolu.edu.tr/~mcavcar/common/Aerodynamicforces.pdf
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Cd : Cd0 + K_cd_cl*Cl^2$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
NOTE: This is probably wrong
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Cs : 2*%pi*%beta$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_w_A_quad : transpose([-Cd*.5*%rho*Vt^2*s_frame,-Cs*.5*%rho*Vt^2*s_frame_side,-Cl*.5*%rho*Vt^2*s_frame]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Quadrotor Wind Frame Equations of Motion
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Airframe Dynamics
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
T_sumSq_eq : dutycycle_F^2+dutycycle_B^2+dutycycle_L^2+dutycycle_R^2$
delta_LR_FB_eq : dutycycle_L^2+dutycycle_R^2-dutycyle_F^2-dutycycle_B^2$
delta_Lsq_Rsq_eq : dutycycle_L^2-dutycycle_R^2$
delta_Fsq_Bsq_eq : dutycycle_F^2-dutycycle_B^2$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
quadAssumptions : [
F_b_T[1,1]=F_b_T_quad[1,1], F_b_T[2,1]=F_b_T_quad[2,1], F_b_T[3,1]=F_b_T_quad[3,1],
F_w_A[1,1]=F_w_A_quad[1,1], F_w_A[2,1]=F_w_A_quad[2,1], F_w_A[3,1]=F_w_A_quad[3,1],
M_b_T[1,1]=M_b_T_quad[1,1], M_b_T[2,1]=M_b_T_quad[2,1], M_b_T[3,1]=M_b_T_quad[3,1],
Jxy=0,Jyz=0,Jxz=0]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
d_x_wind_quad : factor(fullratsubst(quadAssumptions,d_x_wind));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Trim Analaysis
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
d_x_quad_trim_eq : factor(fullratsubst([%phi=0,%beta=0,wx=0,wy=0,wz=0,%alpha=%theta],d_x_wind_quad));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mix_eq : [T_sumSq_eq=T_sumSq,delta_LR_FB_eq=delta_LR_FB,delta_Fsq_Bsq_eq=delta_Fsq_Bsq,delta_Lsq_Rsq_eq=delta_Lsq_Rsq];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
d_x_quad_trim_eq : fullratsubst(mix_eq,d_x_quad_trim_eq);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
T_sumSq_trim : rhs(solve(d_x_quad_trim_eq[1,1],T_sumSq)[1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
theta_eq(theta) := float(''(ratnumer(trigsimp(d_x_quad_trim_eq_mix[2,1]))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Add Motor Dynamcis
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
x_motors : transpose([dutycycle_L,dutycycle_R,dutycycle_F,dutycycle_B]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
d_x_motors : transpose([
%tau[motor]*(dutycycle_Lc-dutycycle_L),
%tau[motor]*(dutycycle_Rc-dutycycle_R),
%tau[motor]*(dutycycle_Fc-dutycycle_F),
%tau[motor]*(dutycycle_Bc-dutycycle_B)]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
x_wind_quad : addrow(x_wind,x_motors);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
d_x_wind_quad : addrow(d_x_wind,d_x_motors);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Linearization
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
u_motors : transpose([dutycycle_Lc,dutycycle_Rc,dutycycle_Fc,dutycycle_Bc]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_quad : fullratsimp(jacobian(vector2list(d_x_wind_quad),vector2list(x_wind_quad)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
G_quad_motors : jacobian(vector2list(d_x_wind_quad),vector2list(u_motors));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_quad_forward_trim : fullratsubst([T_sumSq_eq=T_sumSq],subst([%phi=0,%beta=0,wx=0,wy=0,wz=0,%theta-%alpha=%gamma,%alpha=theta],factor(trigreduce(F_quad))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Now we create the control premixing matrix. This decouples the equations of motion.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
u : matrix(
[-dutycycle_Fc^2+dutycycle_Rc^2+dutycycle_Lc^2-dutycycle_Bc^2],
[dutycycle_Fc^2-dutycycle_Bc^2],
[dutycycle_Lc^2-dutycycle_Rc^2],
[dutycycle_Rc^2+dutycycle_Lc^2+dutycycle_Fc^2+dutycycle_Bc^2]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
The control mix plant has no states and the equation is simply y=D_contmix *u. 
The D_contmix matrix is shown below. The input to the control mix matrix are shown in u above.
The output is u_motors. The equations are nonlinear so we used the jacobian of J(u,u_motors).
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
T_sumSq_eq : dutycycle_F^2+dutycycle_B^2+dutycycle_L^2+dutycycle_R^2$
delta_LR_FB_eq : dutycycle_L+dutycycle_R-dutycycle_F-dutycycle_B$
delta_Lsq_Rsq_eq : dutycycle_L^2-dutycycle_R^2$
delta_Fsq_Bsq_eq : dutycycle_F^2-dutycycle_B^2$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_contmix : fullratsimp(invert(jacobian(vector2list(u),vector2list(u_motors))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Now since we have the control mix plant given by D above we can multiply G_quad  by D_contmix since
dx = F*x + G*u_motors, u_motors = D_contmix*u, hence dx = F*x + G*D_contmix*u
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
G_quad : G_quad_motors.D_contmix;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
GammaT(rho,theta_tau,phi_tau,batVolt,KV,liftCurveSlope,nBlades,rBlade);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
eq: [delta_Lsq_Rsq_eq=delta_Lsq_Rsq;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
u;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mix_u_eq : [T_sumSq_eq=T_sumSq,delta_LR_FB_eq=delta_LR_FB,delta_Fsq_Bsq_eq=delta_Fsq_Bsq,delta_Lsq_Rsq_eq=delta_Lsq_Rsq];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
u_mix : transpose([T_sumSq,delta_LR_FB,delta_Fsq_Bsq,delta_Lsq_Rsq]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
delta_RL_FB_eq=delta_RL_FB;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mix_eq : transpose([
dutycycle_Rc^2+dutycycle_Lc^2+dutycycle_Fc^2+dutycycle_Bc^2=T_sumSq,
dutycycle_Rc^2+dutycycle_Lc^2-dutycycle_Fc^2-dutycycle_Bc^2=delta_LR_FB,
dutycycle_Fc^2-dutycycle_Bc^2=delta_Fsq_Bsq,
dutycycle_Lc^2-dutycycle_Rc^2=delta_Lsq_Rsq]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
u_motors;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Fortran Output
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
with_stdout ("code/quad_C.f90", f90(quad_C))$
   [wxMaxima: comment end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
