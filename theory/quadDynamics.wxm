/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 0.8.7 ] */

/* [wxMaxima: input   start ] */
batch("common.wxm");
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Nonlinear Measurement Equation
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
The inertia matrix J
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
J : matrix([Jx,-Jxy,-Jxz],[-Jxy,Jy,-Jyz],[-Jxz,-Jyz,Jz]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
v_cm_b : transpose([U,V,W]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
M_b_AT : genmatrix(M_b_AT,3,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_b_T : genmatrix(F_b_T,3,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
b_w_ib_b : invert(J).(M_b_AT - cross(w_ib,J.w_ib));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Checked against Aircraft Control and Simulation book 'Stevens and Lewis'  p.110
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fullratsimp(subst([Jyz=0,Jxy=0],b_w_ib_b)[1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
We now construct the state vector for the dynamcis in the stability axis.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
x : transpose([Vt, alpha, theta, wy, beta, phi, wx, wz]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Need: alpha, beta, Vt on page 115 Eqns 2.5-2.9 ; derive/check equations 
Need: Power ; model for the motors RESEARCH

The input will be expressed in terms of motor thrust ratios where delta_FB_LR represents Thrust(F + B) / Thrust(L +R)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
u : transpose([delta_LR_FB,delta_Fsq_Bsq,delta_Rsq_Lsq, T_sumSq]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
When finding G we need to express dstate in terms of the input ratios and thrust sums. This means we need to substitute
all occurences of T_i with the ratios.
As a rough example The equation in the x direction should be:
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
'Bond Graph Dynamic Modeling and Stabilization of a Quad-Rotor Helicopter'
 page 3 equations for Thrust vs Rpm
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
RPM(dutycyle,KV,batVolt) := dutycycle*KV*2*pi/60*batVolt;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ThrustFull(dutycycle) := rho/4*(RPM(dutycycle,KV,batVolt))^2*rBlade^3*
liftCurveSlope*nBlades*chord*(theta_tau-phi_tau);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Most of these are constants so we will substitute the constant terms as gamma.
Gamma = (chord*pi^2*rho*(theta_tau-phi_tau)*batVolt^2*KV^2*liftCurveSlope*nBlades*rBlade^3)/3600
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Thrust(dutycycle) := fullratsubst([(chord*pi^2*rho*(theta_tau-phi_tau)*batVolt^2*KV^2*liftCurveSlope*nBlades*rBlade^3)/3600=GammaT],ThrustFull(dutycycle));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
GammaT(rho,theta_tau,phi_tau,batVolt,KV,liftCurveSlope,nBlades,rBlade) :=
(chord*pi^2*rho*(theta_tau-phi_tau)*batVolt^2*KV^2*liftCurveSlope*nBlades*rBlade^3)/3600;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
http://www.aveox.com/DC.aspx  Equations for torque calculation in terms of RPM
I = Current 
Inl = No load current 
J = Torque (oz-in/A) 
Kb = Voltage constant (Volt/1000 RPM) 
Kt = Torque constant (oz-In/A) 
Pi = Power input (Watts)  
Rm = Terminal resistance 
RPM = Revolutions/minute 
V = Voltage

Torque constant: Kt=Kb x 1.345 
Current draw of motor: I = [V-(Kb x kRPM)]/Rm 
Torque output of motor: J = (Kt x I) - (Kt x Inl) 
RPM of motor: kRPM = (V - RmI) / Kb 
KV = 1000/Kb
Kb = 1000/KV
0.000968504759=1.345
J = (

CHeck current draw of motor equation.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Torque(dutycycle):= 0.968504759/KV*((batVolt*dutycycle)/Rm-Inl);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
T_L : Thrust(dutycycle_L);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
T_R : Thrust(dutycycle_R);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
T_F : Thrust(dutycycle_F);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
T_B : Thrust(dutycycle_B);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
t_L : Torque(dutycycle_L);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
t_R : Torque(dutycycle_R);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
t_F : Torque(dutycycle_F);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
t_B : Torque(dutycycle_B);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
M_b_AT_quad : fullratsubst([dutycycle_R^2-dutycycle_L^2=delta_Rsq_Lsq,
dutycycle_F^2-dutycycle_B^2=delta_Fsq_Bsq,
(dutycycle_R+dutycycle_L-dutycycle_F-dutycycle_B)=delta_LR_FB],
factor(expand(fullratsimp(
transpose([(T_L - T_R)*dm , (T_F-T_B)*dm, t_L+t_R-t_F-t_B])))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Check these equaitons.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
F_w_A : transpose([-D,-C,-L]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
C_wb : C3(beta).C2(-alpha);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_w : C_wb.F_b_T + F_w_A + m*C_wb.C_bn_euler.g_n;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
v_rel_w : transpose([Vt,0,0]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
dw_v_rel_w : transpose([d_Vt,0,0]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
w_wb : transpose([0,0,d_beta]) + C3(beta).transpose([0,-d_alpha,0]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
db_v_rel_w : dw_v_rel_w + cross(w_wb,v_rel_w);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
eqn_d_v_w(i) := m*db_v_rel_w[i,1] = F_w[i,1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
eq_d_Vt : rhs(solve(eqn_d_v_w(1),d_Vt)[1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
eq_d_beta : rhs(solve(eqn_d_v_w(2),d_beta)[1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
eq_d_alpha : rhs(solve(eqn_d_v_w(3),d_alpha)[1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
d_x : transpose([eq_d_Vt,eq_d_alpha,d_theta,b_w_ib_b[2,1],eq_d_beta,d_phi,b_w_ib_b[1,1],b_w_ib_b[3,1]]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
quadAssumptions : [F_b_T[3,1]=T_F+T_B+T_L+T_R,F_b_T[2,1]=0,F_b_T[1,1]=0,
    Jxy=0,Jyz=0,Jxz=0,dutycycle_F^2+dutycycle_B^2+dutycycle_L^2+dutycycle_R^2=T_sumSq,
dutycycle_L+dutycycle_R-dutycyle_F-dutycycle_B=delta_LR_FB,
dutycycle_R^2-dutycycle_L^2=delta_Rsq_Lsq,
dutycycle_F^2-dutycycle_B^2=delta_Fsq_Bsq,
M_b_AT[1,1]=M_b_AT_quad[1,1],M_b_AT[2,1]=M_b_AT_quad[2,1],M_b_AT[3,1]=M_b_AT_quad[3,1]];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
d_x_quad : fullratsubst(quadAssumptions,d_x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Linearization of Dynamics
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
F_quad : fullratsimp(jacobian(makelist(d_x_quad[i,1],i,length(d_x_quad)),
makelist(x[i,1],i,1,length(x))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Assuming that the quad is symmetric about the x and y axis this simplifies to:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
G_quad : jacobian(makelist(d_x_quad[i,1],i,length(d_x_quad)),makelist(u[i,1],i,1,length(u)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
trimAssumptions : [wx=0,wy=0,wz=0,beta=0,phi=0,theta-alpha=gamma,gamma=0];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_quad_trim : fullratsubst(trimAssumptions,trigsimp(trigreduce(F_quad)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
G_quad_trim : fullratsubst(trimAssumptions,trigsimp(trigreduce(G_quad)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
GammaT(rho,theta_tau,phi_tau,batVolt,KV,liftCurveSlope,nBlades,rBlade);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
