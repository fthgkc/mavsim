/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 0.8.7 ] */

/* [wxMaxima: input   start ] */
batch("common.wxm");
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Nonlinear Measurement Equation
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
The inertia matrix J
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
J : matrix([Jx,-Jxy,-Jxz],[-Jxy,Jy,-Jyz],[-Jxz,-Jyz,Jz]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
v_cm_b : transpose([U,V,W]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
M_b_AT : genmatrix(M_b_AT,3,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_b_AT : genmatrix(F_b_AT,3,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
b_w_ib_b : invert(J).(M_b_AT - cross(w_ib,J.w_ib));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Checked against Aircraft Control and Simulation book 'Stevens and Lewis'  p.110
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fullratsimp(subst([Jyz=0,Jxy=0],b_w_ib_b)[1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
We now construct the state vector for the dynamcis in the stability axis.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
x : transpose([V_t, alpha, theta, wy, pow, beta, phi, wx, wz]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Need: alpha, beta, Vt on page 115 Eqns 2.5-2.9 ; derive/check equations 
Need: Power ; model for the motors RESEARCH

The input will be expressed in terms of motor thrust ratios where delta_FB_LR represents Thrust(F + B) / Thrust(L +R)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
u : transpose([delta_LR_FB,delta_F_B, delta_L_R, T_sum]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
When finding G we need to express dstate in terms of the input ratios and thrust sums. This means we need to substitute
all occurences of T_i with the ratios.
As a rough example The equation in the x direction should be:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Vt_dot : ((T1+T2+T3+T4)*sin(phi)-D)/m;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Which can be expressed using T_sum
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Vt_dot : subst(T1+T2+T3+T4=T_sum,Vt_dot);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
This equations is not complete yet as it assumes velocity is in the horizontal direction, which is 
only true for the desired trim condition.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
'Bond Graph Dynamic Modeling and Stabilization of a Quad-Rotor Helicopter'
 page 3 equations for Thrust vs Rpm
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
T(rho,dutycycle,R,liftCurveSlope,nBlades,chord,KV,theta_tau,phi_tau,batVolt) := rho/4*(dutycycle*KV*2*pi/60*batVolt)^2*R^3*
liftCurveSlope*nBlades*chord*(theta_tau-phi_tau);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pi:3.14159;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
T1:T(1.225,1,0.125,2*pi,2,0.025,850,10*pi/180,8.5*pi/180,15);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
T1/9.81/.875;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
http://www.aveox.com/DC.aspx  Equations for torque calculation in terms of RPM
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Torque(Kb,Kt,I,Inl,V,RPM,Rm,P):= Kt*((V-(Kb*RPM/1000))/Rm-Inl);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Kt:Kb*1.345;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Torque(850/1000,Kt,I,0,11.1,;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_w_A : transpose([D,C,L]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_w_AT : C3(beta).C2(alpha).F_b_AT - F_w_A;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
C_wb : C2(alpha).C3(beta);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
d_x : transpose([Vt_dot,0,theta_dot,b_w_ib_b[2,1],0,0,phi_dot,b_w_ib_b[1,1],b_w_ib_b[3,1]]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Linearization of Dynamics
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
F_quad : fullratsimp(jacobian(makelist(d_x[i,1],i,length(d_x)),makelist(x[i,1],i,1,length(x))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Assuming that the quad is symmetric about the x and y axis this simplifies to:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
F_quad_symmetric: subst([Jxy=0,Jyz=0,Jxz=0],F_quad);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
G_quad : jacobian(makelist(d_x[i,1],i,9),makelist(u[i,1],i,1,length(u)));
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
