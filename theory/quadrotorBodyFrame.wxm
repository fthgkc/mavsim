/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 0.8.7 ] */

/* [wxMaxima: title   start ]
Quadrotor Body Frame Models
   [wxMaxima: title   end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("dynamicsBodyFrame.wxm")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("quadrotorForceMoment.wxm")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Quadrotor Body Frame Equations of Motion
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Airframe Dynamics
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
d_x_body_quad : factor(fullratsubst(quadAssumptions,d_x_body));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Trim Analaysis
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
d_x_body_quad_trim_eq : factor(fullratsubst([%phi=0,V=0,U=0,W=0,wx=0,wy=0,wz=0,Vt=0,%theta=0],d_x_body_quad));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mix_eq : [T_sum_eq=T_sum,delta_F_B_eq=delta_F_B,delta_L_R_eq=delta_L_R,delta_LR_FB_eq=delta_LR_FB];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
d_x_body_quad_trim_eq[2,1] : fullratsubst([mix_eq[1]],d_x_body_quad_trim_eq[2,1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
T_sum and T_sum_trim are dimensionless and should vary between 0 and 1
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
T_sum_trim : rhs(solve(d_x_body_quad_trim_eq[2,1],T_sum)[1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
dutycycle_trim : T_sum_trim/4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Add Motor Dynamcis
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
x_motors : transpose([dutycycle_L,dutycycle_R,dutycycle_F,dutycycle_B]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
d_x_motors : transpose([
%tau[motor]*(dutycycle_Lc-dutycycle_L),
%tau[motor]*(dutycycle_Rc-dutycycle_R),
%tau[motor]*(dutycycle_Fc-dutycycle_F),
%tau[motor]*(dutycycle_Bc-dutycycle_B)]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
x_body_quad : addrow(x_body,x_motors);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
d_x_body_quad : addrow(d_x_body_quad,d_x_motors);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Linearization
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
F_body_quad : trigsimp(fullratsimp(jacobian(vector2list(d_x_body_quad),vector2list(x_body_quad))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
G_body_quad_motors : jacobian(vector2list(d_x_body_quad),vector2list(u_motors));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_body_quad_hover : fullratsimp(jacobian(vector2list(d_x_body_quad_trim_eq),vector2list(x_body_quad)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
The control mix plant has no states and the equation is simply y=D_contmix *u. 
The D_contmix matrix is shown below. The input to the control mix matrix are shown in u above.
The output is u_motors. The equations are nonlinear so we used the jacobian of J(dutycycles,uPseudo).
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
D_contmix : fullratsimp(jacobian(vector2list(Dutycycle_vector),vector2list(uPseudo)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Now since we have the control mix plant given by D above we can multiply G_quad  by D_contmix since
dx = F*x + G*u_motors, u_motors = D_contmix*u, hence dx = F*x + G*D_contmix*u
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
G_wind_quad : G_body_quad_motors.D_contmix;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
We can't observe alpha or beta
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
z_body_quad : transpose([U,W,%theta,wy,h,V,%phi,wx,%psi,wz]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
C_wind_quad : jacobian(vector2list(z_body_quad),vector2list(x_body_quad));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_body_quad : zeromatrix(8,4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Fortran Output
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
with_stdout ("code/quad_body_dynamics.f90",
f90(F_body_quad,G_body_quad,C_body_quad,D_body_quad))$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
